/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AgeProofZkKYCInterface extends utils.Interface {
  functions: {
    "INDEX_AGE_THRESHOLD()": FunctionFragment;
    "INDEX_CURRENT_DAY()": FunctionFragment;
    "INDEX_CURRENT_MONTH()": FunctionFragment;
    "INDEX_CURRENT_TIME()": FunctionFragment;
    "INDEX_CURRENT_YEAR()": FunctionFragment;
    "INDEX_DAPP_ID()": FunctionFragment;
    "INDEX_HUMAN_ID()": FunctionFragment;
    "INDEX_IS_VALID()": FunctionFragment;
    "INDEX_PROVIDER_PUBKEY_AX()": FunctionFragment;
    "INDEX_PROVIDER_PUBKEY_AY()": FunctionFragment;
    "INDEX_ROOT()": FunctionFragment;
    "INDEX_USER_ADDRESS()": FunctionFragment;
    "INDEX_USER_PUBKEY_AX()": FunctionFragment;
    "INDEX_USER_PUBKEY_AY()": FunctionFragment;
    "INDEX_VERIFICATION_EXPIRATION()": FunctionFragment;
    "KYCRegistry()": FunctionFragment;
    "START_INDEX_ENCRYPTED_DATA()": FunctionFragment;
    "START_INDEX_INVESTIGATION_INSTITUTIONS()": FunctionFragment;
    "fraudInvestigationInstitutions(uint256)": FunctionFragment;
    "getAmountFraudInvestigationInstitutions()": FunctionFragment;
    "newOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setGalacticaInstituion(address[])": FunctionFragment;
    "setKYCRegistry(address)": FunctionFragment;
    "setNewOwner(address)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "timeDifferenceTolerance()": FunctionFragment;
    "transferOwnership()": FunctionFragment;
    "verifier()": FunctionFragment;
    "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INDEX_AGE_THRESHOLD"
      | "INDEX_CURRENT_DAY"
      | "INDEX_CURRENT_MONTH"
      | "INDEX_CURRENT_TIME"
      | "INDEX_CURRENT_YEAR"
      | "INDEX_DAPP_ID"
      | "INDEX_HUMAN_ID"
      | "INDEX_IS_VALID"
      | "INDEX_PROVIDER_PUBKEY_AX"
      | "INDEX_PROVIDER_PUBKEY_AY"
      | "INDEX_ROOT"
      | "INDEX_USER_ADDRESS"
      | "INDEX_USER_PUBKEY_AX"
      | "INDEX_USER_PUBKEY_AY"
      | "INDEX_VERIFICATION_EXPIRATION"
      | "KYCRegistry"
      | "START_INDEX_ENCRYPTED_DATA"
      | "START_INDEX_INVESTIGATION_INSTITUTIONS"
      | "fraudInvestigationInstitutions"
      | "getAmountFraudInvestigationInstitutions"
      | "newOwner"
      | "owner"
      | "renounceOwnership"
      | "setGalacticaInstituion"
      | "setKYCRegistry"
      | "setNewOwner"
      | "setVerifier"
      | "timeDifferenceTolerance"
      | "transferOwnership"
      | "verifier"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INDEX_AGE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_CURRENT_DAY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_CURRENT_MONTH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_CURRENT_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_CURRENT_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_DAPP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_HUMAN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_IS_VALID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_PROVIDER_PUBKEY_AX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_PROVIDER_PUBKEY_AY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_ROOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_USER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_USER_PUBKEY_AX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_USER_PUBKEY_AY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INDEX_VERIFICATION_EXPIRATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KYCRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_INDEX_ENCRYPTED_DATA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "START_INDEX_INVESTIGATION_INSTITUTIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fraudInvestigationInstitutions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountFraudInvestigationInstitutions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "newOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setGalacticaInstituion",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKYCRegistry",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeDifferenceTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "INDEX_AGE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_CURRENT_DAY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_CURRENT_MONTH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_CURRENT_TIME",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_CURRENT_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_DAPP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_HUMAN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_IS_VALID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_PROVIDER_PUBKEY_AX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_PROVIDER_PUBKEY_AY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "INDEX_ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_USER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_USER_PUBKEY_AX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_USER_PUBKEY_AY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INDEX_VERIFICATION_EXPIRATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KYCRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_INDEX_ENCRYPTED_DATA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "START_INDEX_INVESTIGATION_INSTITUTIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fraudInvestigationInstitutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountFraudInvestigationInstitutions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGalacticaInstituion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setKYCRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeDifferenceTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface AgeProofZkKYC extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AgeProofZkKYCInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INDEX_AGE_THRESHOLD(overrides?: CallOverrides): Promise<[number]>;

    INDEX_CURRENT_DAY(overrides?: CallOverrides): Promise<[number]>;

    INDEX_CURRENT_MONTH(overrides?: CallOverrides): Promise<[number]>;

    INDEX_CURRENT_TIME(overrides?: CallOverrides): Promise<[number]>;

    INDEX_CURRENT_YEAR(overrides?: CallOverrides): Promise<[number]>;

    INDEX_DAPP_ID(overrides?: CallOverrides): Promise<[number]>;

    INDEX_HUMAN_ID(overrides?: CallOverrides): Promise<[number]>;

    INDEX_IS_VALID(overrides?: CallOverrides): Promise<[number]>;

    INDEX_PROVIDER_PUBKEY_AX(overrides?: CallOverrides): Promise<[number]>;

    INDEX_PROVIDER_PUBKEY_AY(overrides?: CallOverrides): Promise<[number]>;

    INDEX_ROOT(overrides?: CallOverrides): Promise<[number]>;

    INDEX_USER_ADDRESS(overrides?: CallOverrides): Promise<[number]>;

    INDEX_USER_PUBKEY_AX(overrides?: CallOverrides): Promise<[number]>;

    INDEX_USER_PUBKEY_AY(overrides?: CallOverrides): Promise<[number]>;

    INDEX_VERIFICATION_EXPIRATION(overrides?: CallOverrides): Promise<[number]>;

    KYCRegistry(overrides?: CallOverrides): Promise<[string]>;

    START_INDEX_ENCRYPTED_DATA(overrides?: CallOverrides): Promise<[number]>;

    START_INDEX_INVESTIGATION_INSTITUTIONS(
      overrides?: CallOverrides
    ): Promise<[number]>;

    fraudInvestigationInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAmountFraudInvestigationInstitutions(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    newOwner(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGalacticaInstituion(
      _fraudInvestigationInstitutions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKYCRegistry(
      newKYCRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeDifferenceTolerance(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  INDEX_AGE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

  INDEX_CURRENT_DAY(overrides?: CallOverrides): Promise<number>;

  INDEX_CURRENT_MONTH(overrides?: CallOverrides): Promise<number>;

  INDEX_CURRENT_TIME(overrides?: CallOverrides): Promise<number>;

  INDEX_CURRENT_YEAR(overrides?: CallOverrides): Promise<number>;

  INDEX_DAPP_ID(overrides?: CallOverrides): Promise<number>;

  INDEX_HUMAN_ID(overrides?: CallOverrides): Promise<number>;

  INDEX_IS_VALID(overrides?: CallOverrides): Promise<number>;

  INDEX_PROVIDER_PUBKEY_AX(overrides?: CallOverrides): Promise<number>;

  INDEX_PROVIDER_PUBKEY_AY(overrides?: CallOverrides): Promise<number>;

  INDEX_ROOT(overrides?: CallOverrides): Promise<number>;

  INDEX_USER_ADDRESS(overrides?: CallOverrides): Promise<number>;

  INDEX_USER_PUBKEY_AX(overrides?: CallOverrides): Promise<number>;

  INDEX_USER_PUBKEY_AY(overrides?: CallOverrides): Promise<number>;

  INDEX_VERIFICATION_EXPIRATION(overrides?: CallOverrides): Promise<number>;

  KYCRegistry(overrides?: CallOverrides): Promise<string>;

  START_INDEX_ENCRYPTED_DATA(overrides?: CallOverrides): Promise<number>;

  START_INDEX_INVESTIGATION_INSTITUTIONS(
    overrides?: CallOverrides
  ): Promise<number>;

  fraudInvestigationInstitutions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAmountFraudInvestigationInstitutions(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  newOwner(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGalacticaInstituion(
    _fraudInvestigationInstitutions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKYCRegistry(
    newKYCRegistry: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewOwner(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    newVerifier: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeDifferenceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  verifyProof(
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ],
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    input: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    INDEX_AGE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

    INDEX_CURRENT_DAY(overrides?: CallOverrides): Promise<number>;

    INDEX_CURRENT_MONTH(overrides?: CallOverrides): Promise<number>;

    INDEX_CURRENT_TIME(overrides?: CallOverrides): Promise<number>;

    INDEX_CURRENT_YEAR(overrides?: CallOverrides): Promise<number>;

    INDEX_DAPP_ID(overrides?: CallOverrides): Promise<number>;

    INDEX_HUMAN_ID(overrides?: CallOverrides): Promise<number>;

    INDEX_IS_VALID(overrides?: CallOverrides): Promise<number>;

    INDEX_PROVIDER_PUBKEY_AX(overrides?: CallOverrides): Promise<number>;

    INDEX_PROVIDER_PUBKEY_AY(overrides?: CallOverrides): Promise<number>;

    INDEX_ROOT(overrides?: CallOverrides): Promise<number>;

    INDEX_USER_ADDRESS(overrides?: CallOverrides): Promise<number>;

    INDEX_USER_PUBKEY_AX(overrides?: CallOverrides): Promise<number>;

    INDEX_USER_PUBKEY_AY(overrides?: CallOverrides): Promise<number>;

    INDEX_VERIFICATION_EXPIRATION(overrides?: CallOverrides): Promise<number>;

    KYCRegistry(overrides?: CallOverrides): Promise<string>;

    START_INDEX_ENCRYPTED_DATA(overrides?: CallOverrides): Promise<number>;

    START_INDEX_INVESTIGATION_INSTITUTIONS(
      overrides?: CallOverrides
    ): Promise<number>;

    fraudInvestigationInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAmountFraudInvestigationInstitutions(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setGalacticaInstituion(
      _fraudInvestigationInstitutions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKYCRegistry(
      newKYCRegistry: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(
      newVerifier: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeDifferenceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(overrides?: CallOverrides): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;

    verifyProof(
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    INDEX_AGE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_CURRENT_DAY(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_CURRENT_MONTH(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_CURRENT_TIME(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_CURRENT_YEAR(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_DAPP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_HUMAN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_IS_VALID(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_PROVIDER_PUBKEY_AX(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_PROVIDER_PUBKEY_AY(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_USER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_USER_PUBKEY_AX(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_USER_PUBKEY_AY(overrides?: CallOverrides): Promise<BigNumber>;

    INDEX_VERIFICATION_EXPIRATION(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    KYCRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    START_INDEX_ENCRYPTED_DATA(overrides?: CallOverrides): Promise<BigNumber>;

    START_INDEX_INVESTIGATION_INSTITUTIONS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fraudInvestigationInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountFraudInvestigationInstitutions(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newOwner(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGalacticaInstituion(
      _fraudInvestigationInstitutions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKYCRegistry(
      newKYCRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifier(
      newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeDifferenceTolerance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INDEX_AGE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_CURRENT_DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_CURRENT_MONTH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_CURRENT_TIME(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_CURRENT_YEAR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_DAPP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_HUMAN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_IS_VALID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_PROVIDER_PUBKEY_AX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_PROVIDER_PUBKEY_AY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INDEX_USER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_USER_PUBKEY_AX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_USER_PUBKEY_AY(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INDEX_VERIFICATION_EXPIRATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KYCRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    START_INDEX_ENCRYPTED_DATA(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    START_INDEX_INVESTIGATION_INSTITUTIONS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fraudInvestigationInstitutions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountFraudInvestigationInstitutions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGalacticaInstituion(
      _fraudInvestigationInstitutions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKYCRegistry(
      newKYCRegistry: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewOwner(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      newVerifier: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeDifferenceTolerance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      input: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
