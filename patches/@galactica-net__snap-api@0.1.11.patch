diff --git a/dist/main.d.mts b/dist/main.d.mts
index b8a6b58e5bcdb97c0d8b0aaff372b90977bc2a92..0489330af773359bcdf1c282718bdd892ddeba19 100644
--- a/dist/main.d.mts
+++ b/dist/main.d.mts
@@ -1,5 +1,17 @@
-import { EncryptedZkCert, ZkCertStandard, HolderCommitmentData, MerkleProof } from '@galactica-net/galactica-types';
-export { EncryptedZkCert, MerkleProof, ProviderData, ZkCertData, ZkCertRegistered, ZkCertStandard } from '@galactica-net/galactica-types';
+import {
+  EncryptedZkCert,
+  ZkCertStandard,
+  HolderCommitmentData,
+  MerkleProof,
+} from "@galactica-net/galactica-types";
+export {
+  EncryptedZkCert,
+  MerkleProof,
+  ProviderData,
+  ZkCertData,
+  ZkCertRegistered,
+  ZkCertStandard,
+} from "@galactica-net/galactica-types";
 
 /**
  * Request for removing data stored in the Snap (holders and zkCertificates).
@@ -15,32 +27,32 @@ declare const clearStorage: (snapOrigin?: string) => Promise<any>;
  * Data defining a zk circuit prover
  */
 type ProverData = {
-    wasm: any;
-    zkeyHeader: any;
-    zkeySections: any[];
+  wasm: any;
+  zkeyHeader: any;
+  zkeySections: any[];
 };
 /**
  * ZkCert proof as it is generated by the snap.
  */
 type ZkCertProof = {
-    proof: {
-        pi_a: [string, string];
-        pi_b: [[string, string], [string, string]];
-        pi_c: [string, string];
-        protocol: string;
-        curve: string;
-    };
-    publicSignals: string[];
+  proof: {
+    pi_a: [string, string];
+    pi_b: [[string, string], [string, string]];
+    pi_c: [string, string];
+    protocol: string;
+    curve: string;
+  };
+  publicSignals: string[];
 };
 /**
  * Parameters for zkCert selection.
  * Because the website does not know IDs for zkCerts, it can provide an optional list of filters to simplify selecting the zkCert.
  */
 type ZkCertSelectionParams = {
-    zkCertStandard?: string;
-    registryAddress?: string;
-    expirationDate?: number;
-    providerAx?: string;
+  zkCertStandard?: string;
+  registryAddress?: string;
+  expirationDate?: number;
+  providerAx?: string;
 };
 
 type DeleteZkCertResponse = string;
@@ -51,7 +63,10 @@ type DeleteZkCertResponse = string;
  * @returns ZkCert data or error.
  * @throws RPCError on failure.
  */
-declare const deleteZkCert: (params: ZkCertSelectionParams, snapOrigin?: string) => Promise<string>;
+declare const deleteZkCert: (
+  params: ZkCertSelectionParams,
+  snapOrigin?: string
+) => Promise<string>;
 
 /**
  * Exports a zkCertificate stored in the snap.
@@ -60,63 +75,72 @@ declare const deleteZkCert: (params: ZkCertSelectionParams, snapOrigin?: string)
  * @returns Encrypted ZkCert data.
  * @throws RPCError on failure.
  */
-declare const exportZkCert: (params: ZkCertSelectionParams, snapOrigin?: string) => Promise<EncryptedZkCert>;
+declare const exportZkCert: (
+  params: ZkCertSelectionParams,
+  snapOrigin?: string
+) => Promise<EncryptedZkCert>;
 
 declare class GalacticaErrorBase<TName extends string> extends Error {
-    name: TName;
-    message: string;
-    cause: any;
-    constructor({ name, message }: {
-        name: TName;
-        message: string;
-    });
-}
-type GenericErrorName = 'RejectedConfirm' | 'UnknownMethod' | 'MissingHolder' | 'MissingZkCert' | 'MerkleProofUpdateFailed' | 'RejectedConnect' | 'RejectedSignature' | 'RejectedSelect';
-declare class GenericError extends GalacticaErrorBase<GenericErrorName> {
+  name: TName;
+  message: string;
+  cause: any;
+  constructor({ name, message }: { name: TName; message: string });
 }
+type GenericErrorName =
+  | "RejectedConfirm"
+  | "UnknownMethod"
+  | "MissingHolder"
+  | "MissingZkCert"
+  | "MerkleProofUpdateFailed"
+  | "RejectedConnect"
+  | "RejectedSignature"
+  | "RejectedSelect";
+declare class GenericError extends GalacticaErrorBase<GenericErrorName> {}
 
 /**
  * Public input needed to generate a zkKYC proof with age limit.
  */
 type ZkKYCAgeProofInput = {
-    currentTime: number;
-    investigationInstitutionPubKey: [string, string][];
-    dAppAddress: string;
-    currentYear: string;
-    currentMonth: string;
-    currentDay: string;
-    ageThreshold: string;
+  currentTime: number;
+  investigationInstitutionPubKey: [string, string][];
+  dAppAddress: string;
+  currentYear: string;
+  currentMonth: string;
+  currentDay: string;
+  ageThreshold: string;
 };
 /**
  * Public input needed to generate a zkKYC proof.
  */
 type ZkKYCProofInput = {
-    currentTime: number;
-    investigationInstitutionPubKey: [string, string][];
-    dAppAddress: string;
+  currentTime: number;
+  investigationInstitutionPubKey: [string, string][];
+  dAppAddress: string;
 };
 /**
  * Union of any ZkCertInputType.
  */
-type ZkCertInputType = ZkKYCProofInput | ZkKYCAgeProofInput | Record<string, any>;
+type ZkCertInputType =
+  | ZkKYCProofInput
+  | ZkKYCAgeProofInput
+  | Record<string, any>;
 
 /**
  * Parameter for requests to generate a ZK proof with the Galactica Snap.
  */
 type GenZkProofParams<ProofInputType> = {
-    input: ProofInputType;
-    requirements: {
-        zkCertStandard: ZkCertStandard;
-        registryAddress: string;
-    };
-    prover: ProverData;
-    userAddress: string;
-    description: string;
-    publicInputDescriptions: string[];
+  input: ProofInputType;
+  requirements: {
+    zkCertStandard: ZkCertStandard;
+    registryAddress: string;
+  };
+  prover: ProverData;
+  userAddress: string;
+  description: string;
+  publicInputDescriptions: string[];
 };
-type GenZKPErrorName = 'MissingInputParams';
-declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {
-}
+type GenZKPErrorName = "MissingInputParams";
+declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {}
 /**
  * GenerateZKProof prepares and executes the call to generate a ZKP in the Galactica snap.
  * You can use it to generate various kinds of proofs, depending on the input you pass.
@@ -125,7 +149,10 @@ declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {
  * @returns Request result with the ZK proof or error.
  * @throws RPCError on failure.
  */
-declare const generateZKProof: (params: GenZkProofParams<ZkCertInputType>, snapOrigin?: string) => Promise<ZkCertProof>;
+declare const generateZKProof: (
+  params: GenZkProofParams<ZkCertInputType>,
+  snapOrigin?: string
+) => Promise<ZkCertProof>;
 
 /**
  * GetHolderCommitment queries the commitment identifying the holder from the snap.
@@ -134,7 +161,9 @@ declare const generateZKProof: (params: GenZkProofParams<ZkCertInputType>, snapO
  * @returns HolderCommitmentData or Error.
  * @throws RPCError on failure.
  */
-declare const getHolderCommitment: (snapOrigin?: string) => Promise<HolderCommitmentData>;
+declare const getHolderCommitment: (
+  snapOrigin?: string
+) => Promise<HolderCommitmentData>;
 
 /**
  * GetZkCertHashes queries a list of zkCert hashes from the Snap API.
@@ -153,15 +182,17 @@ type ZkCertStorageHashes = Partial<Record<ZkCertStandard, string>>;
  * @returns Hashes of all zkCerts for each standard.
  * @throws RPCError on failure.
  */
-declare const getZkStorageHashes: (snapOrigin?: string) => Promise<Partial<Record<ZkCertStandard, string>>>;
+declare const getZkStorageHashes: (
+  snapOrigin?: string
+) => Promise<Partial<Record<ZkCertStandard, string>>>;
 
 type ZkCertListItem = {
-    providerPubKey: {
-        ax: string;
-        ay: string;
-    };
-    expirationDate: number;
-    verificationLevel: string;
+  providerPubKey: {
+    ax: string;
+    ay: string;
+  };
+  expirationDate: number;
+  verificationLevel: string;
 };
 type ZkCertMetadataList = Record<ZkCertStandard, ZkCertListItem[]>;
 /**
@@ -171,12 +202,11 @@ type ZkCertMetadataList = Record<ZkCertStandard, ZkCertListItem[]>;
  */
 declare const listZkCerts: (snapOrigin?: string) => Promise<ZkCertMetadataList>;
 
-type ImportErrorName = 'HolderMissing' | 'FormatError';
-declare class ImportZkCertError extends GalacticaErrorBase<ImportErrorName> {
-}
+type ImportErrorName = "HolderMissing" | "FormatError";
+declare class ImportZkCertError extends GalacticaErrorBase<ImportErrorName> {}
 type ImportZkCertParams = {
-    encryptedZkCert: EncryptedZkCert;
-    listZkCerts?: boolean;
+  encryptedZkCert: EncryptedZkCert;
+  listZkCerts?: boolean;
 };
 /**
  * Imports a zkCertificate from a file into the Snap.
@@ -187,16 +217,19 @@ type ImportZkCertParams = {
  * @example
  * const response = await importZkCert({ zkCert: JSON.parse(fileContent) })
  */
-declare const importZkCert: (importParams: ImportZkCertParams, snapOrigin?: string) => Promise<ZkCertMetadataList>;
+declare const importZkCert: (
+  importParams: ImportZkCertParams,
+  snapOrigin?: string
+) => Promise<ZkCertMetadataList>;
 
 /**
  * Parameter for updating the Merkle proof of one or more zkCerts.
  */
 type MerkleProofUpdateRequestParams = {
-    updates: {
-        registryAddr: string;
-        proof: MerkleProof;
-    }[];
+  updates: {
+    registryAddr: string;
+    proof: MerkleProof;
+  }[];
 };
 /**
  * UpdateMerkleProof allows you to update a list of zkCerts with new Merkle proofs.
@@ -205,17 +238,19 @@ type MerkleProofUpdateRequestParams = {
  * @returns Success message.
  * @throws RPCError on failure.
  */
-declare const updateMerkleProof: (merkleUpdate: MerkleProofUpdateRequestParams, snapOrigin?: string) => Promise<any>;
+declare const updateMerkleProof: (
+  merkleUpdate: MerkleProofUpdateRequestParams,
+  snapOrigin?: string
+) => Promise<any>;
 
 /**
  * Parameter for updating the URL to get Merkle proofs from.
  */
 type MerkleProofURLUpdateParams = {
-    url: string;
+  url: string;
 };
-type URLUpdateErrorName = 'OnlyHTTPS' | 'InvalidURL' | 'TrailingSlashMissing';
-declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {
-}
+type URLUpdateErrorName = "OnlyHTTPS" | "InvalidURL" | "TrailingSlashMissing";
+declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {}
 /**
  * UpdateMerkleProof allows you to update the url to get new merkle proofs from.
  * This is only a fallback until we have a decentralized solution.
@@ -224,14 +259,17 @@ declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {
  * @returns Success message.
  * @throws RPCError on failure.
  */
-declare const updateMerkleProofURL: (update: MerkleProofURLUpdateParams, snapOrigin?: string) => Promise<any>;
+declare const updateMerkleProofURL: (
+  update: MerkleProofURLUpdateParams,
+  snapOrigin?: string
+) => Promise<any>;
 
 type GetSnapsResponse = Record<string, Snap>;
 type Snap = {
-    permissionName: string;
-    id: string;
-    version: string;
-    initialPermissions: Record<string, unknown>;
+  permissionName: string;
+  id: string;
+  version: string;
+  initialPermissions: Record<string, unknown>;
 };
 /**
  * Get the installed snaps in MetaMask.
@@ -243,31 +281,42 @@ declare const getSnaps: () => Promise<GetSnapsResponse>;
  * @param snapId - The ID of the snap.
  * @param params - The params to pass with the snap to connect.
  */
-declare const connectSnap: (snapId?: string, params?: Record<'version', unknown>) => Promise<void>;
+declare const connectSnap: (
+  snapId?: string,
+  params?: Record<"version", unknown>
+) => Promise<void>;
 /**
  * Get the snap from MetaMask.
  * @param snapId - The ID of the snap.
  * @param version - The version of the snap to install (optional).
  * @returns The snap object returned by the extension.
  */
-declare const getSnap: (snapId?: string, version?: string) => Promise<Snap | undefined>;
+declare const getSnap: (
+  snapId?: string,
+  version?: string
+) => Promise<Snap | undefined>;
 declare const isLocalSnap: (snapId: string) => boolean;
 
+export type ChainId = '9302' | '41238';
+
 type SdkConfig = {
-    contracts: {
-        kycGuardianWhitelist: string;
-        zkKycRegistry: string;
-        verificationSbt: string;
-        exampleZkKycAgeProof: string;
-        exampleZkpVerifier: string;
-        exampleDapp: string;
-        exampleInstitution: string[];
-        exampleZkKyc: string;
-        repeatableZkpTest: string;
-        devnetGuardian: string;
-    };
-    defaultSnapOrigin: string;
-    defaultSnapVersion: string;
+  contracts: Record<
+    ChainId,
+    {
+      kycGuardianWhitelist: string;
+      zkKycRegistry: string;
+      verificationSbt: string;
+      exampleZkKycAgeProof: string;
+      exampleZkpVerifier: string;
+      exampleDapp: string;
+      exampleInstitution: string[];
+      exampleZkKyc: string;
+      repeatableZkpTest: string;
+      devnetGuardian: string;
+    }
+  >;
+  defaultSnapOrigin: string;
+  defaultSnapVersion: string;
 };
 declare const sdkConfig: SdkConfig;
 
@@ -275,45 +324,87 @@ declare const sdkConfig: SdkConfig;
  * Enum for RPC methods.
  */
 declare enum RpcMethods {
-    GetHolderCommitment = "getHolderCommitment",
-    GenZkKycProof = "genZkKycProof",
-    ClearStorage = "clearStorage",
-    ImportZkCert = "importZkCert",
-    ExportZkCert = "exportZkCert",
-    ListZkCerts = "listZkCerts",
-    GetZkCertStorageHashes = "getZkCertStorageHashes",
-    GetZkCertHash = "getZkCertHashes",
-    UpdateMerkleProof = "updateMerkleProof",
-    UpdateMerkleProofURL = "updateMerkleProofURL",
-    DeleteZkCert = "deleteZkCert"
+  GetHolderCommitment = "getHolderCommitment",
+  GenZkKycProof = "genZkKycProof",
+  ClearStorage = "clearStorage",
+  ImportZkCert = "importZkCert",
+  ExportZkCert = "exportZkCert",
+  ListZkCerts = "listZkCerts",
+  GetZkCertStorageHashes = "getZkCertStorageHashes",
+  GetZkCertHash = "getZkCertHashes",
+  UpdateMerkleProof = "updateMerkleProof",
+  UpdateMerkleProofURL = "updateMerkleProofURL",
+  DeleteZkCert = "deleteZkCert",
 }
 /**
  * Enum for string responses by the snap.
  */
 declare enum RpcResponseErr {
-    RejectedConfirm = "User rejected confirmation.",
-    UnknownMethod = "Method not found.",
-    MissingHolder = "No holders imported. Please import a holding address first.",
-    RejectedConnect = "User rejected the request.",
-    RejectedSignature = "User denied message signature.",
-    RejectedSelect = "User did not choose a zkCertificate."
+  RejectedConfirm = "User rejected confirmation.",
+  UnknownMethod = "Method not found.",
+  MissingHolder = "No holders imported. Please import a holding address first.",
+  RejectedConnect = "User rejected the request.",
+  RejectedSignature = "User denied message signature.",
+  RejectedSelect = "User did not choose a zkCertificate.",
 }
 
 /**
  * Interface for returning a confirmation response on successful requests without another return type.
  */
 type ConfirmationResponse = {
-    message: RpcResponseMsg;
+  message: RpcResponseMsg;
 };
 /**
  * Enum for string responses by the snap.
  */
 declare enum RpcResponseMsg {
-    StorageCleared = "zkCert storage cleared",
-    ZkCertImported = "zkCert added to storage",
-    MerkleProofsUpdated = "Updated Merkle proofs",
-    ZkCertAlreadyImported = "This zkCert has already been imported. Skipping it.",
-    ZkCertDeleted = "Deleted zkCert."
+  StorageCleared = "zkCert storage cleared",
+  ZkCertImported = "zkCert added to storage",
+  MerkleProofsUpdated = "Updated Merkle proofs",
+  ZkCertAlreadyImported = "This zkCert has already been imported. Skipping it.",
+  ZkCertDeleted = "Deleted zkCert.",
 }
 
-export { ConfirmationResponse, DeleteZkCertResponse, GenZKPError, GenZkProofParams, GenericError, GetSnapsResponse, ImportZkCertError, ImportZkCertParams, MerkleProofURLUpdateParams, MerkleProofUpdateRequestParams, ProverData, RpcMethods, RpcResponseErr, RpcResponseMsg, SdkConfig, Snap, URLUpdateError, ZkCertInputType, ZkCertListItem, ZkCertMetadataList, ZkCertProof, ZkCertSelectionParams, ZkCertStorageHashes, ZkKYCAgeProofInput, ZkKYCProofInput, clearStorage, connectSnap, deleteZkCert, exportZkCert, generateZKProof, getHolderCommitment, getSnap, getSnaps, getZkCertHashes, getZkStorageHashes, importZkCert, isLocalSnap, listZkCerts, sdkConfig, updateMerkleProof, updateMerkleProofURL };
+export {
+  ConfirmationResponse,
+  DeleteZkCertResponse,
+  GenZKPError,
+  GenZkProofParams,
+  GenericError,
+  GetSnapsResponse,
+  ImportZkCertError,
+  ImportZkCertParams,
+  MerkleProofURLUpdateParams,
+  MerkleProofUpdateRequestParams,
+  ProverData,
+  RpcMethods,
+  RpcResponseErr,
+  RpcResponseMsg,
+  SdkConfig,
+  Snap,
+  URLUpdateError,
+  ZkCertInputType,
+  ZkCertListItem,
+  ZkCertMetadataList,
+  ZkCertProof,
+  ZkCertSelectionParams,
+  ZkCertStorageHashes,
+  ZkKYCAgeProofInput,
+  ZkKYCProofInput,
+  clearStorage,
+  connectSnap,
+  deleteZkCert,
+  exportZkCert,
+  generateZKProof,
+  getHolderCommitment,
+  getSnap,
+  getSnaps,
+  getZkCertHashes,
+  getZkStorageHashes,
+  importZkCert,
+  isLocalSnap,
+  listZkCerts,
+  sdkConfig,
+  updateMerkleProof,
+  updateMerkleProofURL,
+};
diff --git a/dist/main.d.ts b/dist/main.d.ts
index b8a6b58e5bcdb97c0d8b0aaff372b90977bc2a92..fab878a9a9b54e4239bac68c64b96e40f75bdc78 100644
--- a/dist/main.d.ts
+++ b/dist/main.d.ts
@@ -1,5 +1,17 @@
-import { EncryptedZkCert, ZkCertStandard, HolderCommitmentData, MerkleProof } from '@galactica-net/galactica-types';
-export { EncryptedZkCert, MerkleProof, ProviderData, ZkCertData, ZkCertRegistered, ZkCertStandard } from '@galactica-net/galactica-types';
+import {
+  EncryptedZkCert,
+  ZkCertStandard,
+  HolderCommitmentData,
+  MerkleProof,
+} from "@galactica-net/galactica-types";
+export {
+  EncryptedZkCert,
+  MerkleProof,
+  ProviderData,
+  ZkCertData,
+  ZkCertRegistered,
+  ZkCertStandard,
+} from "@galactica-net/galactica-types";
 
 /**
  * Request for removing data stored in the Snap (holders and zkCertificates).
@@ -15,32 +27,32 @@ declare const clearStorage: (snapOrigin?: string) => Promise<any>;
  * Data defining a zk circuit prover
  */
 type ProverData = {
-    wasm: any;
-    zkeyHeader: any;
-    zkeySections: any[];
+  wasm: any;
+  zkeyHeader: any;
+  zkeySections: any[];
 };
 /**
  * ZkCert proof as it is generated by the snap.
  */
 type ZkCertProof = {
-    proof: {
-        pi_a: [string, string];
-        pi_b: [[string, string], [string, string]];
-        pi_c: [string, string];
-        protocol: string;
-        curve: string;
-    };
-    publicSignals: string[];
+  proof: {
+    pi_a: [string, string];
+    pi_b: [[string, string], [string, string]];
+    pi_c: [string, string];
+    protocol: string;
+    curve: string;
+  };
+  publicSignals: string[];
 };
 /**
  * Parameters for zkCert selection.
  * Because the website does not know IDs for zkCerts, it can provide an optional list of filters to simplify selecting the zkCert.
  */
 type ZkCertSelectionParams = {
-    zkCertStandard?: string;
-    registryAddress?: string;
-    expirationDate?: number;
-    providerAx?: string;
+  zkCertStandard?: string;
+  registryAddress?: string;
+  expirationDate?: number;
+  providerAx?: string;
 };
 
 type DeleteZkCertResponse = string;
@@ -51,7 +63,10 @@ type DeleteZkCertResponse = string;
  * @returns ZkCert data or error.
  * @throws RPCError on failure.
  */
-declare const deleteZkCert: (params: ZkCertSelectionParams, snapOrigin?: string) => Promise<string>;
+declare const deleteZkCert: (
+  params: ZkCertSelectionParams,
+  snapOrigin?: string
+) => Promise<string>;
 
 /**
  * Exports a zkCertificate stored in the snap.
@@ -60,63 +75,72 @@ declare const deleteZkCert: (params: ZkCertSelectionParams, snapOrigin?: string)
  * @returns Encrypted ZkCert data.
  * @throws RPCError on failure.
  */
-declare const exportZkCert: (params: ZkCertSelectionParams, snapOrigin?: string) => Promise<EncryptedZkCert>;
+declare const exportZkCert: (
+  params: ZkCertSelectionParams,
+  snapOrigin?: string
+) => Promise<EncryptedZkCert>;
 
 declare class GalacticaErrorBase<TName extends string> extends Error {
-    name: TName;
-    message: string;
-    cause: any;
-    constructor({ name, message }: {
-        name: TName;
-        message: string;
-    });
-}
-type GenericErrorName = 'RejectedConfirm' | 'UnknownMethod' | 'MissingHolder' | 'MissingZkCert' | 'MerkleProofUpdateFailed' | 'RejectedConnect' | 'RejectedSignature' | 'RejectedSelect';
-declare class GenericError extends GalacticaErrorBase<GenericErrorName> {
+  name: TName;
+  message: string;
+  cause: any;
+  constructor({ name, message }: { name: TName; message: string });
 }
+type GenericErrorName =
+  | "RejectedConfirm"
+  | "UnknownMethod"
+  | "MissingHolder"
+  | "MissingZkCert"
+  | "MerkleProofUpdateFailed"
+  | "RejectedConnect"
+  | "RejectedSignature"
+  | "RejectedSelect";
+declare class GenericError extends GalacticaErrorBase<GenericErrorName> {}
 
 /**
  * Public input needed to generate a zkKYC proof with age limit.
  */
 type ZkKYCAgeProofInput = {
-    currentTime: number;
-    investigationInstitutionPubKey: [string, string][];
-    dAppAddress: string;
-    currentYear: string;
-    currentMonth: string;
-    currentDay: string;
-    ageThreshold: string;
+  currentTime: number;
+  investigationInstitutionPubKey: [string, string][];
+  dAppAddress: string;
+  currentYear: string;
+  currentMonth: string;
+  currentDay: string;
+  ageThreshold: string;
 };
 /**
  * Public input needed to generate a zkKYC proof.
  */
 type ZkKYCProofInput = {
-    currentTime: number;
-    investigationInstitutionPubKey: [string, string][];
-    dAppAddress: string;
+  currentTime: number;
+  investigationInstitutionPubKey: [string, string][];
+  dAppAddress: string;
 };
 /**
  * Union of any ZkCertInputType.
  */
-type ZkCertInputType = ZkKYCProofInput | ZkKYCAgeProofInput | Record<string, any>;
+type ZkCertInputType =
+  | ZkKYCProofInput
+  | ZkKYCAgeProofInput
+  | Record<string, any>;
 
 /**
  * Parameter for requests to generate a ZK proof with the Galactica Snap.
  */
 type GenZkProofParams<ProofInputType> = {
-    input: ProofInputType;
-    requirements: {
-        zkCertStandard: ZkCertStandard;
-        registryAddress: string;
-    };
-    prover: ProverData;
-    userAddress: string;
-    description: string;
-    publicInputDescriptions: string[];
+  input: ProofInputType;
+  requirements: {
+    zkCertStandard: ZkCertStandard;
+    registryAddress: string;
+  };
+  prover: ProverData;
+  userAddress: string;
+  description: string;
+  publicInputDescriptions: string[];
 };
-type GenZKPErrorName = 'MissingInputParams';
-declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {
-}
+type GenZKPErrorName = "MissingInputParams";
+declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {}
 /**
  * GenerateZKProof prepares and executes the call to generate a ZKP in the Galactica snap.
  * You can use it to generate various kinds of proofs, depending on the input you pass.
@@ -125,7 +149,10 @@ declare class GenZKPError extends GalacticaErrorBase<GenZKPErrorName> {
  * @returns Request result with the ZK proof or error.
  * @throws RPCError on failure.
  */
-declare const generateZKProof: (params: GenZkProofParams<ZkCertInputType>, snapOrigin?: string) => Promise<ZkCertProof>;
+declare const generateZKProof: (
+  params: GenZkProofParams<ZkCertInputType>,
+  snapOrigin?: string
+) => Promise<ZkCertProof>;
 
 /**
  * GetHolderCommitment queries the commitment identifying the holder from the snap.
@@ -134,7 +161,9 @@ declare const generateZKProof: (params: GenZkProofParams<ZkCertInputType>, snapO
  * @returns HolderCommitmentData or Error.
  * @throws RPCError on failure.
  */
-declare const getHolderCommitment: (snapOrigin?: string) => Promise<HolderCommitmentData>;
+declare const getHolderCommitment: (
+  snapOrigin?: string
+) => Promise<HolderCommitmentData>;
 
 /**
  * GetZkCertHashes queries a list of zkCert hashes from the Snap API.
@@ -153,15 +182,17 @@ type ZkCertStorageHashes = Partial<Record<ZkCertStandard, string>>;
  * @returns Hashes of all zkCerts for each standard.
  * @throws RPCError on failure.
  */
-declare const getZkStorageHashes: (snapOrigin?: string) => Promise<Partial<Record<ZkCertStandard, string>>>;
+declare const getZkStorageHashes: (
+  snapOrigin?: string
+) => Promise<Partial<Record<ZkCertStandard, string>>>;
 
 type ZkCertListItem = {
-    providerPubKey: {
-        ax: string;
-        ay: string;
-    };
-    expirationDate: number;
-    verificationLevel: string;
+  providerPubKey: {
+    ax: string;
+    ay: string;
+  };
+  expirationDate: number;
+  verificationLevel: string;
 };
 type ZkCertMetadataList = Record<ZkCertStandard, ZkCertListItem[]>;
 /**
@@ -171,12 +202,11 @@ type ZkCertMetadataList = Record<ZkCertStandard, ZkCertListItem[]>;
  */
 declare const listZkCerts: (snapOrigin?: string) => Promise<ZkCertMetadataList>;
 
-type ImportErrorName = 'HolderMissing' | 'FormatError';
-declare class ImportZkCertError extends GalacticaErrorBase<ImportErrorName> {
-}
+type ImportErrorName = "HolderMissing" | "FormatError";
+declare class ImportZkCertError extends GalacticaErrorBase<ImportErrorName> {}
 type ImportZkCertParams = {
-    encryptedZkCert: EncryptedZkCert;
-    listZkCerts?: boolean;
+  encryptedZkCert: EncryptedZkCert;
+  listZkCerts?: boolean;
 };
 /**
  * Imports a zkCertificate from a file into the Snap.
@@ -187,16 +217,19 @@ type ImportZkCertParams = {
  * @example
  * const response = await importZkCert({ zkCert: JSON.parse(fileContent) })
  */
-declare const importZkCert: (importParams: ImportZkCertParams, snapOrigin?: string) => Promise<ZkCertMetadataList>;
+declare const importZkCert: (
+  importParams: ImportZkCertParams,
+  snapOrigin?: string
+) => Promise<ZkCertMetadataList>;
 
 /**
  * Parameter for updating the Merkle proof of one or more zkCerts.
  */
 type MerkleProofUpdateRequestParams = {
-    updates: {
-        registryAddr: string;
-        proof: MerkleProof;
-    }[];
+  updates: {
+    registryAddr: string;
+    proof: MerkleProof;
+  }[];
 };
 /**
  * UpdateMerkleProof allows you to update a list of zkCerts with new Merkle proofs.
@@ -205,17 +238,19 @@ type MerkleProofUpdateRequestParams = {
  * @returns Success message.
  * @throws RPCError on failure.
  */
-declare const updateMerkleProof: (merkleUpdate: MerkleProofUpdateRequestParams, snapOrigin?: string) => Promise<any>;
+declare const updateMerkleProof: (
+  merkleUpdate: MerkleProofUpdateRequestParams,
+  snapOrigin?: string
+) => Promise<any>;
 
 /**
  * Parameter for updating the URL to get Merkle proofs from.
  */
 type MerkleProofURLUpdateParams = {
-    url: string;
+  url: string;
 };
-type URLUpdateErrorName = 'OnlyHTTPS' | 'InvalidURL' | 'TrailingSlashMissing';
-declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {
-}
+type URLUpdateErrorName = "OnlyHTTPS" | "InvalidURL" | "TrailingSlashMissing";
+declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {}
 /**
  * UpdateMerkleProof allows you to update the url to get new merkle proofs from.
  * This is only a fallback until we have a decentralized solution.
@@ -224,14 +259,17 @@ declare class URLUpdateError extends GalacticaErrorBase<URLUpdateErrorName> {
  * @returns Success message.
  * @throws RPCError on failure.
  */
-declare const updateMerkleProofURL: (update: MerkleProofURLUpdateParams, snapOrigin?: string) => Promise<any>;
+declare const updateMerkleProofURL: (
+  update: MerkleProofURLUpdateParams,
+  snapOrigin?: string
+) => Promise<any>;
 
 type GetSnapsResponse = Record<string, Snap>;
 type Snap = {
-    permissionName: string;
-    id: string;
-    version: string;
-    initialPermissions: Record<string, unknown>;
+  permissionName: string;
+  id: string;
+  version: string;
+  initialPermissions: Record<string, unknown>;
 };
 /**
  * Get the installed snaps in MetaMask.
@@ -243,31 +281,42 @@ declare const getSnaps: () => Promise<GetSnapsResponse>;
  * @param snapId - The ID of the snap.
  * @param params - The params to pass with the snap to connect.
  */
-declare const connectSnap: (snapId?: string, params?: Record<'version', unknown>) => Promise<void>;
+declare const connectSnap: (
+  snapId?: string,
+  params?: Record<"version", unknown>
+) => Promise<void>;
 /**
  * Get the snap from MetaMask.
  * @param snapId - The ID of the snap.
  * @param version - The version of the snap to install (optional).
  * @returns The snap object returned by the extension.
  */
-declare const getSnap: (snapId?: string, version?: string) => Promise<Snap | undefined>;
+declare const getSnap: (
+  snapId?: string,
+  version?: string
+) => Promise<Snap | undefined>;
 declare const isLocalSnap: (snapId: string) => boolean;
 
+ export type ChainId = "9302" | "41238";
+
 type SdkConfig = {
-    contracts: {
-        kycGuardianWhitelist: string;
-        zkKycRegistry: string;
-        verificationSbt: string;
-        exampleZkKycAgeProof: string;
-        exampleZkpVerifier: string;
-        exampleDapp: string;
-        exampleInstitution: string[];
-        exampleZkKyc: string;
-        repeatableZkpTest: string;
-        devnetGuardian: string;
-    };
-    defaultSnapOrigin: string;
-    defaultSnapVersion: string;
+  contracts: Record<
+    ChainId,
+    {
+      kycGuardianWhitelist: string;
+      zkKycRegistry: string;
+      verificationSbt: string;
+      exampleZkKycAgeProof: string;
+      exampleZkpVerifier: string;
+      exampleDapp: string;
+      exampleInstitution: string[];
+      exampleZkKyc: string;
+      repeatableZkpTest: string;
+      devnetGuardian: string;
+    }
+  >;
+  defaultSnapOrigin: string;
+  defaultSnapVersion: string;
 };
 declare const sdkConfig: SdkConfig;
 
@@ -275,45 +324,87 @@ declare const sdkConfig: SdkConfig;
  * Enum for RPC methods.
  */
 declare enum RpcMethods {
-    GetHolderCommitment = "getHolderCommitment",
-    GenZkKycProof = "genZkKycProof",
-    ClearStorage = "clearStorage",
-    ImportZkCert = "importZkCert",
-    ExportZkCert = "exportZkCert",
-    ListZkCerts = "listZkCerts",
-    GetZkCertStorageHashes = "getZkCertStorageHashes",
-    GetZkCertHash = "getZkCertHashes",
-    UpdateMerkleProof = "updateMerkleProof",
-    UpdateMerkleProofURL = "updateMerkleProofURL",
-    DeleteZkCert = "deleteZkCert"
+  GetHolderCommitment = "getHolderCommitment",
+  GenZkKycProof = "genZkKycProof",
+  ClearStorage = "clearStorage",
+  ImportZkCert = "importZkCert",
+  ExportZkCert = "exportZkCert",
+  ListZkCerts = "listZkCerts",
+  GetZkCertStorageHashes = "getZkCertStorageHashes",
+  GetZkCertHash = "getZkCertHashes",
+  UpdateMerkleProof = "updateMerkleProof",
+  UpdateMerkleProofURL = "updateMerkleProofURL",
+  DeleteZkCert = "deleteZkCert",
 }
 /**
  * Enum for string responses by the snap.
  */
 declare enum RpcResponseErr {
-    RejectedConfirm = "User rejected confirmation.",
-    UnknownMethod = "Method not found.",
-    MissingHolder = "No holders imported. Please import a holding address first.",
-    RejectedConnect = "User rejected the request.",
-    RejectedSignature = "User denied message signature.",
-    RejectedSelect = "User did not choose a zkCertificate."
+  RejectedConfirm = "User rejected confirmation.",
+  UnknownMethod = "Method not found.",
+  MissingHolder = "No holders imported. Please import a holding address first.",
+  RejectedConnect = "User rejected the request.",
+  RejectedSignature = "User denied message signature.",
+  RejectedSelect = "User did not choose a zkCertificate.",
 }
 
 /**
  * Interface for returning a confirmation response on successful requests without another return type.
  */
 type ConfirmationResponse = {
-    message: RpcResponseMsg;
+  message: RpcResponseMsg;
 };
 /**
  * Enum for string responses by the snap.
  */
 declare enum RpcResponseMsg {
-    StorageCleared = "zkCert storage cleared",
-    ZkCertImported = "zkCert added to storage",
-    MerkleProofsUpdated = "Updated Merkle proofs",
-    ZkCertAlreadyImported = "This zkCert has already been imported. Skipping it.",
-    ZkCertDeleted = "Deleted zkCert."
+  StorageCleared = "zkCert storage cleared",
+  ZkCertImported = "zkCert added to storage",
+  MerkleProofsUpdated = "Updated Merkle proofs",
+  ZkCertAlreadyImported = "This zkCert has already been imported. Skipping it.",
+  ZkCertDeleted = "Deleted zkCert.",
 }
 
-export { ConfirmationResponse, DeleteZkCertResponse, GenZKPError, GenZkProofParams, GenericError, GetSnapsResponse, ImportZkCertError, ImportZkCertParams, MerkleProofURLUpdateParams, MerkleProofUpdateRequestParams, ProverData, RpcMethods, RpcResponseErr, RpcResponseMsg, SdkConfig, Snap, URLUpdateError, ZkCertInputType, ZkCertListItem, ZkCertMetadataList, ZkCertProof, ZkCertSelectionParams, ZkCertStorageHashes, ZkKYCAgeProofInput, ZkKYCProofInput, clearStorage, connectSnap, deleteZkCert, exportZkCert, generateZKProof, getHolderCommitment, getSnap, getSnaps, getZkCertHashes, getZkStorageHashes, importZkCert, isLocalSnap, listZkCerts, sdkConfig, updateMerkleProof, updateMerkleProofURL };
+export {
+  ConfirmationResponse,
+  DeleteZkCertResponse,
+  GenZKPError,
+  GenZkProofParams,
+  GenericError,
+  GetSnapsResponse,
+  ImportZkCertError,
+  ImportZkCertParams,
+  MerkleProofURLUpdateParams,
+  MerkleProofUpdateRequestParams,
+  ProverData,
+  RpcMethods,
+  RpcResponseErr,
+  RpcResponseMsg,
+  SdkConfig,
+  Snap,
+  URLUpdateError,
+  ZkCertInputType,
+  ZkCertListItem,
+  ZkCertMetadataList,
+  ZkCertProof,
+  ZkCertSelectionParams,
+  ZkCertStorageHashes,
+  ZkKYCAgeProofInput,
+  ZkKYCProofInput,
+  clearStorage,
+  connectSnap,
+  deleteZkCert,
+  exportZkCert,
+  generateZKProof,
+  getHolderCommitment,
+  getSnap,
+  getSnaps,
+  getZkCertHashes,
+  getZkStorageHashes,
+  importZkCert,
+  isLocalSnap,
+  listZkCerts,
+  sdkConfig,
+  updateMerkleProof,
+  updateMerkleProofURL,
+};
diff --git a/dist/main.js b/dist/main.js
index 89fe8d8607e74768b6f8417f2c0800a6bb9e47c6..080fa6cdefe70b735232b246117fae8bc53277f7 100644
--- a/dist/main.js
+++ b/dist/main.js
@@ -5,15 +5,21 @@ var __getOwnPropNames = Object.getOwnPropertyNames;
 var __getOwnPropSymbols = Object.getOwnPropertySymbols;
 var __hasOwnProp = Object.prototype.hasOwnProperty;
 var __propIsEnum = Object.prototype.propertyIsEnumerable;
-var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
+var __defNormalProp = (obj, key, value) =>
+  key in obj
+    ? __defProp(obj, key, {
+        enumerable: true,
+        configurable: true,
+        writable: true,
+        value,
+      })
+    : (obj[key] = value);
 var __spreadValues = (a, b) => {
   for (var prop in b || (b = {}))
-    if (__hasOwnProp.call(b, prop))
-      __defNormalProp(a, prop, b[prop]);
+    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
   if (__getOwnPropSymbols)
     for (var prop of __getOwnPropSymbols(b)) {
-      if (__propIsEnum.call(b, prop))
-        __defNormalProp(a, prop, b[prop]);
+      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
     }
   return a;
 };
@@ -22,14 +28,18 @@ var __export = (target, all) => {
     __defProp(target, name, { get: all[name], enumerable: true });
 };
 var __copyProps = (to, from, except, desc) => {
-  if (from && typeof from === "object" || typeof from === "function") {
+  if ((from && typeof from === "object") || typeof from === "function") {
     for (let key of __getOwnPropNames(from))
       if (!__hasOwnProp.call(to, key) && key !== except)
-        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
+        __defProp(to, key, {
+          get: () => from[key],
+          enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
+        });
   }
   return to;
 };
-var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
+var __toCommonJS = (mod) =>
+  __copyProps(__defProp({}, "__esModule", { value: true }), mod);
 
 // src/main.ts
 var main_exports = {};
@@ -57,7 +67,7 @@ __export(main_exports, {
   listZkCerts: () => listZkCerts,
   sdkConfig: () => sdkConfig,
   updateMerkleProof: () => updateMerkleProof,
-  updateMerkleProofURL: () => updateMerkleProofURL
+  updateMerkleProofURL: () => updateMerkleProofURL,
 });
 module.exports = __toCommonJS(main_exports);
 
@@ -79,7 +89,8 @@ var RpcMethods = /* @__PURE__ */ ((RpcMethods2) => {
 var RpcResponseErr = /* @__PURE__ */ ((RpcResponseErr2) => {
   RpcResponseErr2["RejectedConfirm"] = "User rejected confirmation.";
   RpcResponseErr2["UnknownMethod"] = "Method not found.";
-  RpcResponseErr2["MissingHolder"] = "No holders imported. Please import a holding address first.";
+  RpcResponseErr2["MissingHolder"] =
+    "No holders imported. Please import a holding address first.";
   RpcResponseErr2["RejectedConnect"] = "User rejected the request.";
   RpcResponseErr2["RejectedSignature"] = "User denied message signature.";
   RpcResponseErr2["RejectedSelect"] = "User did not choose a zkCertificate.";
@@ -88,24 +99,42 @@ var RpcResponseErr = /* @__PURE__ */ ((RpcResponseErr2) => {
 
 // src/config/index.ts
 var sdkConfig = {
+  defaultSnapOrigin: "npm:@galactica-net/snap",
+  defaultSnapVersion: "0.6.1",
   contracts: {
-    kycGuardianWhitelist: "0xB95314E42d8Da05b1D805039F7b96e3935584543",
-    zkKycRegistry: "0x0415E990e55071F0d448F87CD170528C7783A484",
-    verificationSbt: "0x062DaB74A2709EC730FE11b3d9C00033B0FBAf92",
-    exampleZkKycAgeProof: "0x1554B2D7422941Be9903040d9946da60d9f2bC3C",
-    exampleZkpVerifier: "0xA437DFE87F9096e52E4dEcAA7cfc14d82A5aE07e",
-    exampleDapp: "0xBD2FAA4835E1A462Ea4FDA39352F24C58e237e2a",
-    exampleInstitution: [
-      "0x5E523B1c7c04eB971D3b851C82d3935b91fb4b3e",
-      "0xcc433436B6c01142EC9B95a1b80B3734CD4849f3",
-      "0x8d5ebACB647aea8a76082A36C93997765A50AF0E"
-    ],
-    exampleZkKyc: "0xD95efF72F06079DEcE33b18B165fc3A7a4bdc1fD",
-    repeatableZkpTest: "0xa99fcD678D985fB2ac8aD3fE913aED88705A44fc",
-    devnetGuardian: "0x71d80ea7744302E5b1cFD61a7a26153FF221ca9E"
+    41238: {
+      kycGuardianWhitelist: "0xB95314E42d8Da05b1D805039F7b96e3935584543",
+      zkKycRegistry: "0x0415E990e55071F0d448F87CD170528C7783A484",
+      verificationSbt: "0x062DaB74A2709EC730FE11b3d9C00033B0FBAf92",
+      exampleZkKycAgeProof: "0x1554B2D7422941Be9903040d9946da60d9f2bC3C",
+      exampleZkpVerifier: "0xA437DFE87F9096e52E4dEcAA7cfc14d82A5aE07e",
+      exampleDapp: "0xBD2FAA4835E1A462Ea4FDA39352F24C58e237e2a",
+      exampleInstitution: [
+        "0x5E523B1c7c04eB971D3b851C82d3935b91fb4b3e",
+        "0xcc433436B6c01142EC9B95a1b80B3734CD4849f3",
+        "0x8d5ebACB647aea8a76082A36C93997765A50AF0E",
+      ],
+      exampleZkKyc: "0xD95efF72F06079DEcE33b18B165fc3A7a4bdc1fD",
+      repeatableZkpTest: "0xa99fcD678D985fB2ac8aD3fE913aED88705A44fc",
+      devnetGuardian: "0x71d80ea7744302E5b1cFD61a7a26153FF221ca9E",
+    },
+    9302: {
+      kycGuardianWhitelist: "0x8Db9C6d860694d6bF151c961E2A55d3F51e2D138",
+      zkKycRegistry: "0x85032c035494324f62A5AfE2507d5427dFd72e76",
+      verificationSbt: "0xc6d55A0F0f7b6b5a2418963AC35d312535F20D67",
+      exampleZkKycAgeProof: "0x1fA98f7B53dCCC93f37243e2069781225dE442f3",
+      exampleZkpVerifier: "0xCF0EA7C6b77c2ef8EbCD8854671f35f092Db7A5E",
+      exampleDapp: "0x9a17084bb850FBF1431BBEC6e7b316F374E2b49c",
+      exampleInstitution: [
+        "0xb8B1720908717E585d98A502c0A9743c06DC96E5",
+        "0xB9e011AD8849aeA1F2d9d30582987645bFAE3729",
+        "0xC29A1e7aD2f3B938a1668d4e2702801BF21CE32C",
+      ],
+      exampleZkKyc: "0x6989febF9623FAD3c5FC25B84e0b8F2F0d9a68f0",
+      repeatableZkpTest: "0x4262b70fDBBF05C48a0887472b89988B84C98564",
+      devnetGuardian: "0xEcE0BBeB552710718A1bD5E028443ff9B2f26BE5",
+    },
   },
-  defaultSnapOrigin: "npm:@galactica-net/snap",
-  defaultSnapVersion: "0.6.1"
 };
 
 // src/utils/invoke-snap.ts
@@ -114,18 +143,23 @@ var invokeSnap = async (request, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   if (!window.ethereum) {
     throw new Error("window.ethereum is undefined");
   }
-  return (_a = window.ethereum) == null ? void 0 : _a.request({
-    method: "wallet_invokeSnap",
-    params: {
-      snapId: snapOrigin,
-      request
-    }
-  });
+  return (_a = window.ethereum) == null
+    ? void 0
+    : _a.request({
+        method: "wallet_invokeSnap",
+        params: {
+          snapId: snapOrigin,
+          request,
+        },
+      });
 };
 
 // src/api/clear-storage.ts
 var clearStorage = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
-  return await invokeSnap({ method: "clearStorage" /* ClearStorage */ }, snapOrigin);
+  return await invokeSnap(
+    { method: "clearStorage" /* ClearStorage */ },
+    snapOrigin
+  );
 };
 
 // src/api/delete-zk-cert.ts
@@ -133,7 +167,7 @@ var deleteZkCert = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
       method: "deleteZkCert" /* DeleteZkCert */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -145,7 +179,7 @@ var exportZkCert = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
       method: "exportZkCert" /* ExportZkCert */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -160,17 +194,18 @@ var GalacticaErrorBase = class extends Error {
     this.message = message;
   }
 };
-var GenericError = class extends GalacticaErrorBase {
-};
+var GenericError = class extends GalacticaErrorBase {};
 
 // src/api/gen-zk-kyc-proof.ts
-var GenZKPError = class extends GalacticaErrorBase {
-};
-var generateZKProof = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var GenZKPError = class extends GalacticaErrorBase {};
+var generateZKProof = async (
+  params,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "genZkKycProof" /* GenZkKycProof */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -181,7 +216,7 @@ var generateZKProof = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) =
 var getHolderCommitment = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "getHolderCommitment" /* GetHolderCommitment */
+      method: "getHolderCommitment" /* GetHolderCommitment */,
     },
     snapOrigin
   );
@@ -201,7 +236,7 @@ var getZkCertHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 var getZkStorageHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "getZkCertStorageHashes" /* GetZkCertStorageHashes */
+      method: "getZkCertStorageHashes" /* GetZkCertStorageHashes */,
     },
     snapOrigin
   );
@@ -209,13 +244,15 @@ var getZkStorageHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 };
 
 // src/api/import-zk-cert.ts
-var ImportZkCertError = class extends GalacticaErrorBase {
-};
-var importZkCert = async (importParams, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var ImportZkCertError = class extends GalacticaErrorBase {};
+var importZkCert = async (
+  importParams,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "importZkCert" /* ImportZkCert */,
-      params: importParams
+      params: importParams,
     },
     snapOrigin
   );
@@ -226,7 +263,7 @@ var importZkCert = async (importParams, snapOrigin = sdkConfig.defaultSnapOrigin
 var listZkCerts = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "listZkCerts" /* ListZkCerts */
+      method: "listZkCerts" /* ListZkCerts */,
     },
     snapOrigin
   );
@@ -234,11 +271,14 @@ var listZkCerts = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 };
 
 // src/api/update-merkle-proof.ts
-var updateMerkleProof = async (merkleUpdate, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var updateMerkleProof = async (
+  merkleUpdate,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "updateMerkleProof" /* UpdateMerkleProof */,
-      params: merkleUpdate
+      params: merkleUpdate,
     },
     snapOrigin
   );
@@ -246,13 +286,15 @@ var updateMerkleProof = async (merkleUpdate, snapOrigin = sdkConfig.defaultSnapO
 };
 
 // src/api/update-merkle-proof-url.ts
-var URLUpdateError = class extends GalacticaErrorBase {
-};
-var updateMerkleProofURL = async (update, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var URLUpdateError = class extends GalacticaErrorBase {};
+var updateMerkleProofURL = async (
+  update,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "updateMerkleProofURL" /* UpdateMerkleProofURL */,
-      params: update
+      params: update,
     },
     snapOrigin
   );
@@ -265,16 +307,19 @@ var import_galactica_types = require("@galactica-net/galactica-types");
 // src/api/snap.ts
 var getSnaps = async () => {
   return await window.ethereum.request({
-    method: "wallet_getSnaps"
+    method: "wallet_getSnaps",
   });
 };
-var connectSnap = async (snapId = sdkConfig.defaultSnapOrigin, params = { version: void 0 }) => {
+var connectSnap = async (
+  snapId = sdkConfig.defaultSnapOrigin,
+  params = { version: void 0 }
+) => {
   console.log("Connecting to snap", snapId, params);
   const res = await window.ethereum.request({
     method: "wallet_requestSnaps",
     params: {
-      [snapId]: __spreadValues({}, params)
-    }
+      [snapId]: __spreadValues({}, params),
+    },
   });
   console.log(JSON.stringify(res, null, 2));
 };
@@ -296,35 +341,37 @@ var RpcResponseMsg = /* @__PURE__ */ ((RpcResponseMsg2) => {
   RpcResponseMsg2["StorageCleared"] = "zkCert storage cleared";
   RpcResponseMsg2["ZkCertImported"] = "zkCert added to storage";
   RpcResponseMsg2["MerkleProofsUpdated"] = "Updated Merkle proofs";
-  RpcResponseMsg2["ZkCertAlreadyImported"] = "This zkCert has already been imported. Skipping it.";
+  RpcResponseMsg2["ZkCertAlreadyImported"] =
+    "This zkCert has already been imported. Skipping it.";
   RpcResponseMsg2["ZkCertDeleted"] = "Deleted zkCert.";
   return RpcResponseMsg2;
 })(RpcResponseMsg || {});
 // Annotate the CommonJS export names for ESM import in node:
-0 && (module.exports = {
-  GenZKPError,
-  GenericError,
-  ImportZkCertError,
-  RpcMethods,
-  RpcResponseErr,
-  RpcResponseMsg,
-  URLUpdateError,
-  ZkCertStandard,
-  clearStorage,
-  connectSnap,
-  deleteZkCert,
-  exportZkCert,
-  generateZKProof,
-  getHolderCommitment,
-  getSnap,
-  getSnaps,
-  getZkCertHashes,
-  getZkStorageHashes,
-  importZkCert,
-  isLocalSnap,
-  listZkCerts,
-  sdkConfig,
-  updateMerkleProof,
-  updateMerkleProofURL
-});
+0 &&
+  (module.exports = {
+    GenZKPError,
+    GenericError,
+    ImportZkCertError,
+    RpcMethods,
+    RpcResponseErr,
+    RpcResponseMsg,
+    URLUpdateError,
+    ZkCertStandard,
+    clearStorage,
+    connectSnap,
+    deleteZkCert,
+    exportZkCert,
+    generateZKProof,
+    getHolderCommitment,
+    getSnap,
+    getSnaps,
+    getZkCertHashes,
+    getZkStorageHashes,
+    importZkCert,
+    isLocalSnap,
+    listZkCerts,
+    sdkConfig,
+    updateMerkleProof,
+    updateMerkleProofURL,
+  });
 //# sourceMappingURL=main.js.map
diff --git a/dist/main.mjs b/dist/main.mjs
index e2105650c1a1c24c077e6956f5e2a37e26fed17b..4972ca8485d4922a6c71182d061db12bb42cc5f2 100644
--- a/dist/main.mjs
+++ b/dist/main.mjs
@@ -2,15 +2,21 @@ var __defProp = Object.defineProperty;
 var __getOwnPropSymbols = Object.getOwnPropertySymbols;
 var __hasOwnProp = Object.prototype.hasOwnProperty;
 var __propIsEnum = Object.prototype.propertyIsEnumerable;
-var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
+var __defNormalProp = (obj, key, value) =>
+  key in obj
+    ? __defProp(obj, key, {
+        enumerable: true,
+        configurable: true,
+        writable: true,
+        value,
+      })
+    : (obj[key] = value);
 var __spreadValues = (a, b) => {
   for (var prop in b || (b = {}))
-    if (__hasOwnProp.call(b, prop))
-      __defNormalProp(a, prop, b[prop]);
+    if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
   if (__getOwnPropSymbols)
     for (var prop of __getOwnPropSymbols(b)) {
-      if (__propIsEnum.call(b, prop))
-        __defNormalProp(a, prop, b[prop]);
+      if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
     }
   return a;
 };
@@ -33,7 +39,8 @@ var RpcMethods = /* @__PURE__ */ ((RpcMethods2) => {
 var RpcResponseErr = /* @__PURE__ */ ((RpcResponseErr2) => {
   RpcResponseErr2["RejectedConfirm"] = "User rejected confirmation.";
   RpcResponseErr2["UnknownMethod"] = "Method not found.";
-  RpcResponseErr2["MissingHolder"] = "No holders imported. Please import a holding address first.";
+  RpcResponseErr2["MissingHolder"] =
+    "No holders imported. Please import a holding address first.";
   RpcResponseErr2["RejectedConnect"] = "User rejected the request.";
   RpcResponseErr2["RejectedSignature"] = "User denied message signature.";
   RpcResponseErr2["RejectedSelect"] = "User did not choose a zkCertificate.";
@@ -42,24 +49,42 @@ var RpcResponseErr = /* @__PURE__ */ ((RpcResponseErr2) => {
 
 // src/config/index.ts
 var sdkConfig = {
+  defaultSnapOrigin: "npm:@galactica-net/snap",
+  defaultSnapVersion: "0.6.1",
   contracts: {
-    kycGuardianWhitelist: "0xB95314E42d8Da05b1D805039F7b96e3935584543",
-    zkKycRegistry: "0x0415E990e55071F0d448F87CD170528C7783A484",
-    verificationSbt: "0x062DaB74A2709EC730FE11b3d9C00033B0FBAf92",
-    exampleZkKycAgeProof: "0x1554B2D7422941Be9903040d9946da60d9f2bC3C",
-    exampleZkpVerifier: "0xA437DFE87F9096e52E4dEcAA7cfc14d82A5aE07e",
-    exampleDapp: "0xBD2FAA4835E1A462Ea4FDA39352F24C58e237e2a",
-    exampleInstitution: [
-      "0x5E523B1c7c04eB971D3b851C82d3935b91fb4b3e",
-      "0xcc433436B6c01142EC9B95a1b80B3734CD4849f3",
-      "0x8d5ebACB647aea8a76082A36C93997765A50AF0E"
-    ],
-    exampleZkKyc: "0xD95efF72F06079DEcE33b18B165fc3A7a4bdc1fD",
-    repeatableZkpTest: "0xa99fcD678D985fB2ac8aD3fE913aED88705A44fc",
-    devnetGuardian: "0x71d80ea7744302E5b1cFD61a7a26153FF221ca9E"
+    41238: {
+      kycGuardianWhitelist: "0xB95314E42d8Da05b1D805039F7b96e3935584543",
+      zkKycRegistry: "0x0415E990e55071F0d448F87CD170528C7783A484",
+      verificationSbt: "0x062DaB74A2709EC730FE11b3d9C00033B0FBAf92",
+      exampleZkKycAgeProof: "0x1554B2D7422941Be9903040d9946da60d9f2bC3C",
+      exampleZkpVerifier: "0xA437DFE87F9096e52E4dEcAA7cfc14d82A5aE07e",
+      exampleDapp: "0xBD2FAA4835E1A462Ea4FDA39352F24C58e237e2a",
+      exampleInstitution: [
+        "0x5E523B1c7c04eB971D3b851C82d3935b91fb4b3e",
+        "0xcc433436B6c01142EC9B95a1b80B3734CD4849f3",
+        "0x8d5ebACB647aea8a76082A36C93997765A50AF0E",
+      ],
+      exampleZkKyc: "0xD95efF72F06079DEcE33b18B165fc3A7a4bdc1fD",
+      repeatableZkpTest: "0xa99fcD678D985fB2ac8aD3fE913aED88705A44fc",
+      devnetGuardian: "0x71d80ea7744302E5b1cFD61a7a26153FF221ca9E",
+    },
+    9302: {
+      kycGuardianWhitelist: "0x8Db9C6d860694d6bF151c961E2A55d3F51e2D138",
+      zkKycRegistry: "0x85032c035494324f62A5AfE2507d5427dFd72e76",
+      verificationSbt: "0xc6d55A0F0f7b6b5a2418963AC35d312535F20D67",
+      exampleZkKycAgeProof: "0x1fA98f7B53dCCC93f37243e2069781225dE442f3",
+      exampleZkpVerifier: "0xCF0EA7C6b77c2ef8EbCD8854671f35f092Db7A5E",
+      exampleDapp: "0x9a17084bb850FBF1431BBEC6e7b316F374E2b49c",
+      exampleInstitution: [
+        "0xb8B1720908717E585d98A502c0A9743c06DC96E5",
+        "0xB9e011AD8849aeA1F2d9d30582987645bFAE3729",
+        "0xC29A1e7aD2f3B938a1668d4e2702801BF21CE32C",
+      ],
+      exampleZkKyc: "0x6989febF9623FAD3c5FC25B84e0b8F2F0d9a68f0",
+      repeatableZkpTest: "0x4262b70fDBBF05C48a0887472b89988B84C98564",
+      devnetGuardian: "0xEcE0BBeB552710718A1bD5E028443ff9B2f26BE5",
+    },
   },
-  defaultSnapOrigin: "npm:@galactica-net/snap",
-  defaultSnapVersion: "0.6.1"
 };
 
 // src/utils/invoke-snap.ts
@@ -68,18 +93,23 @@ var invokeSnap = async (request, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   if (!window.ethereum) {
     throw new Error("window.ethereum is undefined");
   }
-  return (_a = window.ethereum) == null ? void 0 : _a.request({
-    method: "wallet_invokeSnap",
-    params: {
-      snapId: snapOrigin,
-      request
-    }
-  });
+  return (_a = window.ethereum) == null
+    ? void 0
+    : _a.request({
+        method: "wallet_invokeSnap",
+        params: {
+          snapId: snapOrigin,
+          request,
+        },
+      });
 };
 
 // src/api/clear-storage.ts
 var clearStorage = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
-  return await invokeSnap({ method: "clearStorage" /* ClearStorage */ }, snapOrigin);
+  return await invokeSnap(
+    { method: "clearStorage" /* ClearStorage */ },
+    snapOrigin
+  );
 };
 
 // src/api/delete-zk-cert.ts
@@ -87,7 +117,7 @@ var deleteZkCert = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
       method: "deleteZkCert" /* DeleteZkCert */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -99,7 +129,7 @@ var exportZkCert = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
       method: "exportZkCert" /* ExportZkCert */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -114,17 +144,18 @@ var GalacticaErrorBase = class extends Error {
     this.message = message;
   }
 };
-var GenericError = class extends GalacticaErrorBase {
-};
+var GenericError = class extends GalacticaErrorBase {};
 
 // src/api/gen-zk-kyc-proof.ts
-var GenZKPError = class extends GalacticaErrorBase {
-};
-var generateZKProof = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var GenZKPError = class extends GalacticaErrorBase {};
+var generateZKProof = async (
+  params,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "genZkKycProof" /* GenZkKycProof */,
-      params
+      params,
     },
     snapOrigin
   );
@@ -135,7 +166,7 @@ var generateZKProof = async (params, snapOrigin = sdkConfig.defaultSnapOrigin) =
 var getHolderCommitment = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "getHolderCommitment" /* GetHolderCommitment */
+      method: "getHolderCommitment" /* GetHolderCommitment */,
     },
     snapOrigin
   );
@@ -155,7 +186,7 @@ var getZkCertHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 var getZkStorageHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "getZkCertStorageHashes" /* GetZkCertStorageHashes */
+      method: "getZkCertStorageHashes" /* GetZkCertStorageHashes */,
     },
     snapOrigin
   );
@@ -163,13 +194,15 @@ var getZkStorageHashes = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 };
 
 // src/api/import-zk-cert.ts
-var ImportZkCertError = class extends GalacticaErrorBase {
-};
-var importZkCert = async (importParams, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var ImportZkCertError = class extends GalacticaErrorBase {};
+var importZkCert = async (
+  importParams,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "importZkCert" /* ImportZkCert */,
-      params: importParams
+      params: importParams,
     },
     snapOrigin
   );
@@ -180,7 +213,7 @@ var importZkCert = async (importParams, snapOrigin = sdkConfig.defaultSnapOrigin
 var listZkCerts = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
   const response = await invokeSnap(
     {
-      method: "listZkCerts" /* ListZkCerts */
+      method: "listZkCerts" /* ListZkCerts */,
     },
     snapOrigin
   );
@@ -188,11 +221,14 @@ var listZkCerts = async (snapOrigin = sdkConfig.defaultSnapOrigin) => {
 };
 
 // src/api/update-merkle-proof.ts
-var updateMerkleProof = async (merkleUpdate, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var updateMerkleProof = async (
+  merkleUpdate,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "updateMerkleProof" /* UpdateMerkleProof */,
-      params: merkleUpdate
+      params: merkleUpdate,
     },
     snapOrigin
   );
@@ -200,13 +236,15 @@ var updateMerkleProof = async (merkleUpdate, snapOrigin = sdkConfig.defaultSnapO
 };
 
 // src/api/update-merkle-proof-url.ts
-var URLUpdateError = class extends GalacticaErrorBase {
-};
-var updateMerkleProofURL = async (update, snapOrigin = sdkConfig.defaultSnapOrigin) => {
+var URLUpdateError = class extends GalacticaErrorBase {};
+var updateMerkleProofURL = async (
+  update,
+  snapOrigin = sdkConfig.defaultSnapOrigin
+) => {
   const response = await invokeSnap(
     {
       method: "updateMerkleProofURL" /* UpdateMerkleProofURL */,
-      params: update
+      params: update,
     },
     snapOrigin
   );
@@ -219,16 +257,19 @@ import { ZkCertStandard } from "@galactica-net/galactica-types";
 // src/api/snap.ts
 var getSnaps = async () => {
   return await window.ethereum.request({
-    method: "wallet_getSnaps"
+    method: "wallet_getSnaps",
   });
 };
-var connectSnap = async (snapId = sdkConfig.defaultSnapOrigin, params = { version: void 0 }) => {
+var connectSnap = async (
+  snapId = sdkConfig.defaultSnapOrigin,
+  params = { version: void 0 }
+) => {
   console.log("Connecting to snap", snapId, params);
   const res = await window.ethereum.request({
     method: "wallet_requestSnaps",
     params: {
-      [snapId]: __spreadValues({}, params)
-    }
+      [snapId]: __spreadValues({}, params),
+    },
   });
   console.log(JSON.stringify(res, null, 2));
 };
@@ -250,7 +291,8 @@ var RpcResponseMsg = /* @__PURE__ */ ((RpcResponseMsg2) => {
   RpcResponseMsg2["StorageCleared"] = "zkCert storage cleared";
   RpcResponseMsg2["ZkCertImported"] = "zkCert added to storage";
   RpcResponseMsg2["MerkleProofsUpdated"] = "Updated Merkle proofs";
-  RpcResponseMsg2["ZkCertAlreadyImported"] = "This zkCert has already been imported. Skipping it.";
+  RpcResponseMsg2["ZkCertAlreadyImported"] =
+    "This zkCert has already been imported. Skipping it.";
   RpcResponseMsg2["ZkCertDeleted"] = "Deleted zkCert.";
   return RpcResponseMsg2;
 })(RpcResponseMsg || {});
@@ -278,6 +320,6 @@ export {
   listZkCerts,
   sdkConfig,
   updateMerkleProof,
-  updateMerkleProofURL
+  updateMerkleProofURL,
 };
 //# sourceMappingURL=main.mjs.map
